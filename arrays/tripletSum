#include <iostream>
#include<unordered_map>
using namespace std;

int tripleSum(int arr[], int n, int num) {
    
    for (int i = 0; i <= n-3; i++) {
        int sum = num - arr[i];
        
        unordered_map<int,int> map;
        unordered_map<int, int> map2;
        for (int j = i+1; j <= n-1; j++) {
            map[arr[j]] = 1;
        }
        for (int j = i+1; j <= n-1; j++) {
            if (map2[arr[j]] > 0 ) {
                map2[arr[j]]++;
            }
            else {
                map2[arr[j]] = 1;
            }
        }
        for (int j = i+1; j <= n-1; j++) {
            int a = sum - arr[j];
            if (map[a] == 1 ) {                                      // Use hash to store structure to improve the solution.
                                                                     // Better Method - Sort first. Then solve. O(n^2)
                if (a==arr[j]) {
                    if (map2[a] != 1)
                        return 1;
                }
                else {
                    return 1;
                }
            }
            else
                continue;
        }
        map.clear();
    }
    return 0;
}

int main() {
	int T, n, num;
	int* arr;
	cin>>T;
	
	for (int i = 0; i<T; i++) {
	    cin>>n>>num;
	    arr = new int[n];
	    for (int j = 0; j < n; j++) {
	        cin>>arr[j];
	    }
	    cout<<tripleSum(arr, n, num)<<endl;
	}
	return 0;
}
